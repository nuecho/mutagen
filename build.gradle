/*
 * Copyright (C) 2018 Nu Echo Inc
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.FixCrLfFilter

plugins {
    id 'com.diffplug.gradle.spotless' version '3.8.0'
    id 'org.jetbrains.kotlin.jvm' version '1.2.41'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'edu.sc.seis.launch4j' version '2.4.3'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-3'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.github.ksoichiro.console.reporter' version '0.5.0'
}

repositories {
    mavenCentral()
    maven { url "$System.env.GENESYS_PSDK_MAVEN_URL" }
}

apply plugin: 'com.github.ksoichiro.console.reporter'
apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'edu.sc.seis.launch4j'

// Workaround for https://github.com/johnrengelman/shadow/issues/336
// It allows the mainClassName property to be properly set.
apply plugin: 'application'

description = 'Nu Echo\'s Genesys Command Line Interface'
group = 'com.nuecho'
version = "${version}"
mainClassName = 'com.nuecho.mutagen.cli.MutagenCli'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def baseShadowInstallDir = "$buildDir/install/${project.name}-shadow"
def testsExecuted = 0

kotlin {
    experimental {
        coroutines "enable"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        afterSuite { suite, result ->
            if (!suite.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                testsExecuted = result.testCount
            }
        }
    }
    doLast {
        if (testsExecuted == 0) throw new GradleException("No test to run!")
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jacoco {
    applyTo run
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.destination file("${buildDir}/reports/jacoco/report.csv")
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

test.finalizedBy(jacocoTestReport, jacocoTestCoverageVerification)

detekt {
    version = '1.0.0.RC6-4'

    profile("main") {
        input = "$projectDir/src/main/kotlin,$projectDir/src/test/kotlin"
        config = "$projectDir/detekt.yml"
    }
}

spotless {
    kotlin {
        ktlint('0.15.0')
    }
}

jar {
    manifest {
        attributes('Version': version, 'Application-Name': 'mutagen')
    }
}

shadowJar {
    baseName = 'mutagen'
    classifier = null
    version = version
}

license {
    strictCheck = false
    ignoreFailures = true
    skipExistingHeaders = true
}

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')

    includeProjectDependencies = true
    reportByDependency = false
    reportByLicenseType = true
    dependencyConfiguration = "compile"
    aliases = [
            (apacheTwo): [
                    'The Apache Software License, Version 2.0',
                    'The Apache Software License, version 2.0',
                    'The Apache License, Version 2.0',
                    'Apache License Version 2.0',
                    'Apache License, Version 2.0',
                    'Apache License 2.0',
                    'Apache 2'
            ]
    ]
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.2.+'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.2.+'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.+'

    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.9.+'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.+'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.+'

    compile 'com.genesyslab.platform:comappblock:900.+'
    compile 'com.genesyslab.platform:commons:900.+'
    compile 'com.genesyslab.platform:configurationprotocol:900.+'
    compile 'com.genesyslab.platform:reportingprotocol:900.+'
    compile 'com.genesyslab.platform:voiceprotocol:900.+'

    compile 'ch.qos.logback:logback-classic:1.2.+'
    compile 'com.github.kittinunf.fuel:fuel:1.12.+'
    compile 'info.picocli:picocli:2.3.+'
    compile 'io.github.microutils:kotlin-logging:1.5.+'
    compile 'org.fusesource.jansi:jansi:1.17.+'
    compile 'org.json:json:20180130'
    compile 'org.jgrapht:jgrapht-core:1.2.+'
    compile 'io.dropwizard.metrics:metrics-core:4.0.+'
    compile 'io.dropwizard.metrics:metrics-json:4.0.+'

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.1.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.1.0')

    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.+'
    testCompile 'io.mockk:mockk:1.7.+'
}

runShadow {
    // Allow passing arguments using gradlew runShadow
    // gradlew runShadow -Dexec.args="..."
    args System.getProperty("exec.args", "").split()
}

launch4j {
    headerType = 'console'
    mainClassName = project.mainClassName
    jar = "lib/${project.tasks.shadowJar.archiveName}"
    copyConfigurable = project.tasks.shadowJar.outputs.files
}

task copyLicense(type: Copy) {
    description 'Copy license file into mutagen resources folder.'
    from(file("LICENSE"))
    into(file("src/main/resources"))
}

task shellExecutable(type: Copy, dependsOn: 'installShadowDist') {
    description 'Copy executable script and replace classpath variable for self location.'

    from(file("${baseShadowInstallDir}/bin/${project.name}"))
    into(file("${baseShadowInstallDir}/lib/"))
    filter {
        line -> line.replaceAll(/^CLASSPATH=.*$/, 'CLASSPATH=\\$(which "\\$0" 2>/dev/null)')
    }
    // since it's a shell script force LS
    filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
}

task shellExecutableWithJarPayload(dependsOn: 'shellExecutable') {
    description 'Turn executable script into a standalone one with embedded jar file.'
    doLast {
        def output = new File("$buildDir/${project.name}")
        output.write('') // clear-off
        output << file("${baseShadowInstallDir}/lib/${project.name}").text
        output << '\nexit $?\n'
        output << file("${baseShadowInstallDir}/lib/${project.tasks.shadowJar.archiveName}").bytes
    }
}

// This obviously won't work on Windows.
task changeShellExecutablePermission(dependsOn: 'shellExecutableWithJarPayload') {
    description 'Change shell executable permission.'
    doLast {
        project.exec {
            commandLine('chmod', '+x', "$buildDir/${project.name}")
        }
    }
}

task release(dependsOn: ['createAllExecutables', 'changeShellExecutablePermission']) {
    description 'Create release artifacts.'
}

check.dependsOn detektCheck
compileKotlin.dependsOn copyLicense
